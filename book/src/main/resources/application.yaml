server:
  port: 8080
---
# 'default' 프로필 설정
spring:
  config:
    activate:
      on-profile: default
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
  cloud:
    function:
      definition: bookEventConsumer;wheneverBookAccessRequested_CheckPolicy;wheneverBookAccessChecked_Route
      # Consumer 역할을 하는 빈(Bean)의 이름을 지정합니다.
      # 이전 단계에서 PolicyHandler에 'bookEventConsumer'로 만들었으므로 이름을 맞춰줍니다.
#      definition: bookEventConsumer;bookEventProducer
    stream:
      # 함수형 모델의 바인딩 설정
      bindings:
        # 기존 Consumer
        bookEventConsumer-in-0:
          destination: event-in
          group: book
          contentType: application/json

        # wheneverBookAccessChecked_Route는 BookAccessChecked 타입의 이벤트만 받도록 필터링합니다.
        wheneverBookAccessChecked_Route-in-0:
          destination: book.topic
          group: book
          consumer:
            # 이 필터링 조건을 추가합니다.
            condition: "headers['type']=='BookAccessChecked'"

        # wheneverBookAccessRequested_CheckPolicy는 BookAccessRequested 타입의 이벤트만 받도록 필터링합니다.
        # 이 바인딩이 명시적으로 없었다면 아래와 같이 추가해줍니다.
        wheneverBookAccessRequested_CheckPolicy-in-0:
          destination: book.topic
          group: book
          consumer:
            # 이 필터링 조건을 추가합니다.
            condition: "headers['type']=='BookAccessRequested'"

        bookEventProducer-out-0:
          destination: book.topic
      kafka:
        binder:
          brokers: localhost:9092

---
# 'docker' 프로필 설정
spring:
  # 이 부분이 수정되었습니다.
  config:
    activate:
      on-profile: docker
  cloud:
    function:
      definition: bookEventConsumer;wheneverBookAccessRequested_CheckPolicy;wheneverBookAccessChecked_Route
    stream:
      bindings:
        bookEventConsumer-in-0:
          destination: event-in
          group: book
          contentType: application/json
        bookEventProducer-out-0:
          destination: event-out
      kafka:
        binder:
          # 쿠버네티스 내부 Kafka 서비스 주소
          brokers: my-kafka.kafka.svc.cluster.local:9092




#server:
#  port: 8080
#
#spring:
#  application:
#    name: book
#---
#
#spring:
#  config:
#    activate:
#      on-profile: default
#  jpa:
#    properties:
#      hibernate:
#        show_sql: true
#        format_sql: true
#        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
#  cloud:
#    stream:
#      kafka:
#        binder:
#          brokers: localhost:9092
#        streams:
#          binder:
#            configuration:
#              default:
#                key:
#                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#                value:
#                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#      bindings:
#        event-in:
#          group: book
#          #<<< EDA / Topic Name
#          destination: library
#          #>>> EDA / Topic Name
#          contentType: application/json
#        event-out:
#          #<<< EDA / Topic Name
#          destination: library
#          #>>> EDA / Topic Name
#          contentType: application/json
#
#logging:
#  level:
#    org.hibernate.type: trace
#    org.springframework.cloud: debug
#
#
#server:
#  port: 8084
#
#---
#
#spring:
#  config:
#    activate:
#      on-profile: docker
#  jpa:
#    properties:
#      hibernate:
#        show_sql: true
#        format_sql: true
#        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
#  cloud:
#    stream:
#      kafka:
#        binder:
#          brokers: my-kafka:9092
#        streams:
#          binder:
#            configuration:
#              default:
#                key:
#                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#                value:
#                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
#      bindings:
#        event-in:
#          group: book
#          destination: library
#          contentType: application/json
#        event-out:
#          destination: library
#          contentType: application/json
#
#
